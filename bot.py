import telebot
from telebot import types
import schedule
import time
import datetime

TOKEN = "–¢–í–û–ô_–¢–û–ö–ï–ù"
bot = telebot.TeleBot(TOKEN)

# –ó–¥–µ—Å—å –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# –§–æ—Ä–º–∞—Ç: {chat_id: {"task": int, "waiting": bool}}
# task = 0 (–µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∏), 1, 2, 3...
# waiting = True -> –∂–¥—ë–º –æ—Ç–≤–µ—Ç–∞ "–¥–∞/–Ω–µ—Ç"
user_state = {}

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@bot.message_handler(commands=["start"])
def start_message(message):
    chat_id = message.chat.id
    user_state[chat_id] = {"task": 0, "waiting": False}
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤ 9:00.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ ---
def morning_job():
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
    print(f"[{now}] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")

    for chat_id, state in user_state.items():
        task = state["task"]
        waiting = state["waiting"]

        if task == 0:  
            # –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ó–∞–¥–∞–Ω–∏–µ 1
            bot.send_message(chat_id, "–ó–∞–¥–∞–Ω–∏–µ 1")
            state["task"] = 1
            state["waiting"] = True

        elif waiting:  
            # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
            markup = types.InlineKeyboardMarkup()
            btn_yes = types.InlineKeyboardButton("–î–∞", callback_data="yes")
            btn_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="no")
            markup.add(btn_yes, btn_no)
            bot.send_message(chat_id, "–í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å –∑–∞–¥–∞–Ω–∏–µ–º?", reply_markup=markup)

        else:  
            # –ï—Å–ª–∏ –∂–¥–∞—Ç—å –Ω–µ –Ω–∞–¥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏)
            pass

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
@bot.callback_query_handler(func=lambda call: True)
def handle_answer(call):
    chat_id = call.message.chat.id
    state = user_state.get(chat_id, {"task": 0, "waiting": False})

    if call.data == "yes":
        if state["task"] == 1:
            bot.send_message(chat_id, "–ó–∞–¥–∞–Ω–∏–µ 2")
            state["task"] = 2
            state["waiting"] = True

        elif state["task"] == 2:
            bot.send_message(chat_id, "–ó–∞–¥–∞–Ω–∏–µ 3")
            state["task"] = 3
            state["waiting"] = True

        elif state["task"] == 3:
            bot.send_message(chat_id, "–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
            state["waiting"] = False  # –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã

    elif call.data == "no":
        bot.send_message(chat_id, "–û—á–µ–Ω—å –∂–∞–ª—å üòø. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –∑–∞–≤—Ç—Ä–∞!")
        state["waiting"] = True  # –∑–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ —Å–ø—Ä–æ—Å–∏–º

    user_state[chat_id] = state
    bot.answer_callback_query(call.id)

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 ---
schedule.every().day.at("09:00").do(morning_job)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º 9 —É—Ç—Ä–∞...")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
while True:
    schedule.run_pending()
    bot.polling(none_stop=True, interval=0, timeout=20)
    time.sleep(1)
